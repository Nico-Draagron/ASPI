services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aspi-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: aspi_db
      POSTGRES_USER: aspi
      POSTGRES_PASSWORD: aspi123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
      - ./database/migrations:/docker-entrypoint-initdb.d/migrations
    networks:
      - aspi_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aspi -d aspi_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aspi-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - aspi_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # n8n Workflow Engine
  n8n:
    image: n8nio/n8n:latest
    container_name: aspi-n8n
    restart: unless-stopped
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_SECURE_COOKIE=false
      - WEBHOOK_URL=http://localhost:5678
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_DATABASE=n8n_db
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_USER=aspi
      - DB_POSTGRESDB_PASSWORD=aspi123
      - EXECUTIONS_DATA_PRUNE=true
      - EXECUTIONS_DATA_MAX_AGE=168
      - GENERIC_TIMEZONE=America/Sao_Paulo
      - TZ=America/Sao_Paulo
      - N8N_METRICS=true
      - N8N_LOG_LEVEL=info
      - N8N_ENCRYPTION_KEY=aspi-encryption-key-2024
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./workflows/n8n:/tmp/workflows
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aspi_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Streamlit Application
  streamlit:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    container_name: aide-streamlit
    restart: unless-stopped
    environment:
      - N8N_BASE_URL=http://n8n:5678
      - N8N_API_KEY=${N8N_API_KEY:-}
      - N8N_WEBHOOK_TOKEN=${N8N_WEBHOOK_TOKEN:-}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=aide_db
      - DB_USER=aide_user
      - DB_PASSWORD=${DB_PASSWORD:-aide_secure_password_123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - ONS_API_URL=${ONS_API_URL:-https://dados.ons.org.br/api/v1}
      - ONS_API_KEY=${ONS_API_KEY:-}
      - APP_ENV=production
      - PYTHONUNBUFFERED=1
    ports:
      - "8501:8501"
    volumes:
      - ./app.py:/app/app.py
      - ./services:/app/services
      - ./models:/app/models
      - ./utils:/app/utils
      - ./static:/app/static
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      n8n:
        condition: service_healthy
    networks:
      - aspi_network
    command: streamlit run app.py --server.port=8501 --server.address=0.0.0.0

  # Nginx Reverse Proxy (Opcional para produção)
  nginx:
    image: nginx:alpine
    container_name: aide-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - streamlit
      - n8n
    networks:
      - aspi_network
    profiles:
      - production

  # PgAdmin (Opcional para desenvolvimento)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: aide-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@aide.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - aspi_network
    profiles:
      - development

  # Redis Commander (Opcional para desenvolvimento)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: aide-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-admin123}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - aspi_network
    profiles:
      - development

  # Backup Service (Executa diariamente)
  backup:
    image: postgres:15-alpine
    container_name: aide-backup
    environment:
      PGPASSWORD: ${DB_PASSWORD:-aide_secure_password_123}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    entrypoint: ["/bin/sh", "-c"]
    command: 
      - |
        while true; do
          echo "Executando backup..."
          pg_dump -h postgres -U aide_user -d aide_db > /backups/aide_backup_$$(date +%Y%m%d_%H%M%S).sql
          echo "Backup concluído"
          sleep 86400
        done
    depends_on:
      - postgres
    networks:
      - aspi_network
    profiles:
      - production

networks:
  aspi_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  n8n_data:
    driver: local
  pgadmin_data:
    driver: local
