{
  "name": "AIDE - Ingest√£o de Dados ONS",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 1
            }
          ]
        }
      },
      "id": "cron-trigger",
      "name": "Trigger Hor√°rio",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "url": "https://api.aide.local/health",
        "options": {
          "timeout": 5000
        }
      },
      "id": "health-check",
      "name": "Health Check Sistema",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [450, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.status }}",
              "value2": "healthy"
            }
          ]
        }
      },
      "id": "system-status",
      "name": "Sistema Dispon√≠vel?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "url": "https://dados.ons.org.br/api/v1/datasets",
        "options": {
          "headers": {
            "Accept": "application/json",
            "User-Agent": "AIDE-DataCollector/1.0"
          }
        }
      },
      "id": "fetch-datasets-list",
      "name": "Buscar Lista Datasets ONS",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [850, 200]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT dataset_id, last_updated, update_frequency FROM datasets WHERE source_type = 'ONS' AND active = true",
        "options": {}
      },
      "id": "get-datasets-db",
      "name": "Consultar Datasets BD",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [850, 400],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "AIDE PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Comparar datasets ONS com BD e identificar atualiza√ß√µes\nconst onsDatasets = $input.first().json;\nconst dbDatasets = $input.last().json;\n\nconst datasetsToUpdate = [];\n\nfor (const onsDataset of onsDatasets) {\n  const dbDataset = dbDatasets.find(d => d.dataset_id === onsDataset.id);\n  \n  if (!dbDataset) {\n    // Novo dataset\n    datasetsToUpdate.push({\n      ...onsDataset,\n      action: 'create',\n      priority: 'high'\n    });\n  } else {\n    // Verificar se precisa atualiza√ß√£o\n    const lastUpdate = new Date(dbDataset.last_updated);\n    const onsUpdate = new Date(onsDataset.updated_at);\n    \n    if (onsUpdate > lastUpdate) {\n      datasetsToUpdate.push({\n        ...onsDataset,\n        action: 'update',\n        priority: onsDataset.critical ? 'high' : 'normal'\n      });\n    }\n  }\n}\n\n// Priorizar datasets cr√≠ticos\nconst criticalDatasets = ['carga_energia', 'cmo_pld', 'bandeiras_tarifarias'];\n\ndatasetsToUpdate.forEach(dataset => {\n  if (criticalDatasets.includes(dataset.id)) {\n    dataset.priority = 'critical';\n  }\n});\n\nreturn datasetsToUpdate.sort((a, b) => {\n  const priorityOrder = { critical: 0, high: 1, normal: 2 };\n  return priorityOrder[a.priority] - priorityOrder[b.priority];\n});"
      },
      "id": "compare-datasets",
      "name": "Comparar e Priorizar",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "batchSize": 5,
        "options": {}
      },
      "id": "split-batches",
      "name": "Dividir em Lotes",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [1250, 300]
    },
    {
      "parameters": {
        "url": "={{ 'https://dados.ons.org.br/api/v1/datasets/' + $json.id + '/data' }}",
        "options": {
          "headers": {
            "Accept": "application/json"
          },
          "qs": {
            "start_date": "={{ $now.minus(7, 'days').toISO() }}",
            "end_date": "={{ $now.toISO() }}",
            "format": "json"
          },
          "timeout": 30000
        }
      },
      "id": "fetch-dataset-data",
      "name": "Baixar Dados Dataset",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1450, 300]
    },
    {
      "parameters": {
        "jsCode": "// Validar e transformar dados\nconst rawData = $json;\nconst datasetId = $item.$node['split-batches'].json.id;\n\n// Valida√ß√µes b√°sicas\nif (!rawData || !rawData.data || !Array.isArray(rawData.data)) {\n  throw new Error(`Dados inv√°lidos para dataset ${datasetId}`);\n}\n\n// Transforma√ß√µes espec√≠ficas por dataset\nlet transformedData = [];\n\nswitch(datasetId) {\n  case 'carga_energia':\n    transformedData = rawData.data.map(row => ({\n      dataset_id: datasetId,\n      timestamp: new Date(row.din_instante),\n      region: row.nom_subsistema,\n      value: parseFloat(row.val_cargaenergiamwmed),\n      unit: 'MWmed',\n      metadata: {\n        id_subsistema: row.id_subsistema,\n        quality_flag: row.quality || 'verified'\n      }\n    }));\n    break;\n    \n  case 'cmo_pld':\n    transformedData = rawData.data.map(row => ({\n      dataset_id: datasetId,\n      timestamp: new Date(row.din_instante),\n      region: row.nom_subsistema,\n      value: parseFloat(row.val_cmomediasemanal || row.val_cmo),\n      unit: 'R$/MWh',\n      metadata: {\n        patamar: row.patamar || 'medio',\n        tipo: row.tipo_preco || 'cmo'\n      }\n    }));\n    break;\n    \n  case 'bandeiras_tarifarias':\n    transformedData = rawData.data.map(row => ({\n      dataset_id: datasetId,\n      timestamp: new Date(row.DatCompetencia),\n      region: 'Brasil',\n      value: parseFloat(row.VlrAdicionalBandeira),\n      unit: 'R$/100kWh',\n      metadata: {\n        bandeira: row.NomBandeiraAcionada,\n        vigencia: row.DatGeracaoConjuntoDados\n      }\n    }));\n    break;\n    \n  default:\n    // Transforma√ß√£o gen√©rica\n    transformedData = rawData.data.map(row => ({\n      dataset_id: datasetId,\n      timestamp: new Date(),\n      data: row\n    }));\n}\n\n// Adicionar metadados de processamento\nreturn transformedData.map(item => ({\n  ...item,\n  processed_at: new Date().toISOString(),\n  source: 'ONS_API',\n  version: rawData.version || '1.0'\n}));"
      },
      "id": "transform-data",
      "name": "Validar e Transformar",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1650, 300]
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "data_records",
        "columns": "dataset_id,timestamp,region,value,unit,metadata,processed_at,source",
        "options": {
          "onConflict": "update",
          "conflictColumns": "dataset_id,timestamp,region"
        }
      },
      "id": "insert-data",
      "name": "Inserir Dados no BD",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1850, 300],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "AIDE PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE datasets SET last_updated = NOW(), row_count = (SELECT COUNT(*) FROM data_records WHERE dataset_id = '{{ $json.dataset_id }}'), status = 'active' WHERE dataset_id = '{{ $json.dataset_id }}'",
        "options": {}
      },
      "id": "update-dataset-status",
      "name": "Atualizar Status Dataset",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [2050, 300],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "AIDE PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "sendText",
        "chatId": "{{ $env.TELEGRAM_CHAT_ID }}",
        "text": "‚úÖ AIDE - Ingest√£o de Dados Conclu√≠da\n\nüìä Dataset: {{ $json.dataset_id }}\nüìà Registros: {{ $json.row_count }}\nüïê Atualizado: {{ $now.format('DD/MM/YYYY HH:mm') }}"
      },
      "id": "notify-success",
      "name": "Notificar Sucesso",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [2250, 200],
      "credentials": {
        "telegramApi": {
          "id": "2",
          "name": "AIDE Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "message": "‚ö†Ô∏è AIDE - Sistema Indispon√≠vel",
        "additionalFields": {
          "priority": 2,
          "title": "Health Check Failed"
        }
      },
      "id": "alert-system-down",
      "name": "Alertar Sistema Down",
      "type": "n8n-nodes-base.pushover",
      "typeVersion": 1,
      "position": [650, 450]
    },
    {
      "parameters": {
        "jsCode": "// Log de erro detalhado\nconst error = $json.error || {};\nconst context = {\n  workflow: 'data_ingestion',\n  dataset: $item.$node['split-batches'].json.id || 'unknown',\n  timestamp: new Date().toISOString(),\n  error: {\n    message: error.message,\n    stack: error.stack,\n    code: error.code\n  },\n  environment: $env.NODE_ENV || 'production'\n};\n\n// Salvar log no Redis para an√°lise\nreturn {\n  key: `error:ingestion:${Date.now()}`,\n  value: JSON.stringify(context),\n  ttl: 86400 // 24 horas\n};"
      },
      "id": "error-handler",
      "name": "Tratar Erros",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1850, 450],
      "executeOnError": true
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ $json.key }}",
        "value": "={{ $json.value }}",
        "keyType": "automatic",
        "expire": true,
        "ttl": "={{ $json.ttl }}"
      },
      "id": "cache-error",
      "name": "Cache Erro Redis",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [2050, 450],
      "credentials": {
        "redis": {
          "id": "3",
          "name": "AIDE Redis"
        }
      }
    }
  ],
  "connections": {
    "cron-trigger": {
      "main": [[{"node": "health-check", "type": "main", "index": 0}]]
    },
    "health-check": {
      "main": [[{"node": "system-status", "type": "main", "index": 0}]]
    },
    "system-status": {
      "main": [
        [
          {"node": "fetch-datasets-list", "type": "main", "index": 0},
          {"node": "get-datasets-db", "type": "main", "index": 0}
        ],
        [{"node": "alert-system-down", "type": "main", "index": 0}]
      ]
    },
    "fetch-datasets-list": {
      "main": [[{"node": "compare-datasets", "type": "main", "index": 0}]]
    },
    "get-datasets-db": {
      "main": [[{"node": "compare-datasets", "type": "main", "index": 0}]]
    },
    "compare-datasets": {
      "main": [[{"node": "split-batches", "type": "main", "index": 0}]]
    },
    "split-batches": {
      "main": [[{"node": "fetch-dataset-data", "type": "main", "index": 0}]]
    },
    "fetch-dataset-data": {
      "main": [[{"node": "transform-data", "type": "main", "index": 0}]]
    },
    "transform-data": {
      "main": [[{"node": "insert-data", "type": "main", "index": 0}]]
    },
    "insert-data": {
      "main": [[{"node": "update-dataset-status", "type": "main", "index": 0}]]
    },
    "update-dataset-status": {
      "main": [[{"node": "notify-success", "type": "main", "index": 0}]]
    },
    "error-handler": {
      "main": [[{"node": "cache-error", "type": "main", "index": 0}]]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "error-notification-workflow"
  },
  "staticData": null,
  "tags": [
    {
      "id": "1",
      "name": "production"
    },
    {
      "id": "2", 
      "name": "data-ingestion"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "aide-v1"
}