{
  "name": "AIDE - Monitoramento e Alertas",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 5
            }
          ]
        }
      },
      "id": "cron-monitor",
      "name": "Check a cada 5 min",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "jsCode": "const metrics = [{ name: 'database_health', query: 'SELECT 1 as health', type: 'postgres', threshold: null, critical: true }, { name: 'redis_health', command: 'PING', type: 'redis', expected: 'PONG', critical: true }, { name: 'data_freshness', query: 'SELECT dataset_id, MAX(timestamp) as last_update, EXTRACT(EPOCH FROM (NOW() - MAX(timestamp)))/3600 as hours_since_update FROM data_records WHERE dataset_id IN (\\'carga_energia\\', \\'cmo_pld\\') GROUP BY dataset_id', type: 'postgres', threshold: 24, critical: false }, { name: 'error_rate', query: 'SELECT COUNT(*) as error_count, COUNT(CASE WHEN created_at > NOW() - INTERVAL \\'1 hour\\' THEN 1 END) as recent_errors FROM error_logs WHERE created_at > NOW() - INTERVAL \\'24 hours\\'', type: 'postgres', threshold: 100, critical: false }, { name: 'api_response_time', url: 'http://localhost:8501/health', type: 'http', timeout: 5000, critical: false }, { name: 'disk_usage', query: 'SELECT pg_database_size(\\'aide_db\\')/1024/1024 as size_mb, pg_database_size(\\'aide_db\\')/1024/1024/1024 as size_gb FROM pg_database WHERE datname = \\'aide_db\\' LIMIT 1', type: 'postgres', threshold: 10000, critical: false }, { name: 'active_sessions', command: 'KEYS session:*', type: 'redis', threshold: 1000, critical: false }, { name: 'queue_size', query: 'SELECT COUNT(*) as pending_jobs FROM job_queue WHERE status = \\'pending\\'', type: 'postgres', threshold: 500, critical: false }]; return metrics;"
      },
      "id": "define-metrics",
      "name": "Definir Metricas",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "process-metrics",
      "name": "Processar Metricas",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [650, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.type }}",
              "value2": "postgres"
            }
          ]
        }
      },
      "id": "check-metric-type",
      "name": "Tipo de Metrica",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 2,
      "position": [850, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{ $json.query }}",
        "options": {}
      },
      "id": "postgres-check",
      "name": "Check PostgreSQL",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1050, 200],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "AIDE PostgreSQL"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "operation": "executeCommand",
        "command": "={{ $json.command }}",
        "arguments": {}
      },
      "id": "redis-check",
      "name": "Check Redis",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [1050, 300],
      "credentials": {
        "redis": {
          "id": "3",
          "name": "AIDE Redis"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "options": {
          "timeout": "={{ $json.timeout }}"
        }
      },
      "id": "http-check",
      "name": "Check HTTP",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1050, 400],
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "const metric = $('process-metrics').first().json; const result = $json; const success = !result.error; let status = 'ok'; let value = null; let message = ''; if (!success) { status = 'error'; message = result.error?.message || 'Check failed'; } else { switch(metric.type) { case 'postgres': if (metric.threshold && result[0]) { const checkValue = result[0][Object.keys(result[0])[0]]; value = checkValue; if (checkValue > metric.threshold) { status = 'warning'; message = `Value ${checkValue} exceeds threshold ${metric.threshold}`; } } break; case 'redis': if (metric.expected) { if (result !== metric.expected) { status = 'error'; message = `Expected ${metric.expected}, got ${result}`; } } else if (metric.threshold && Array.isArray(result)) { value = result.length; if (result.length > metric.threshold) { status = 'warning'; message = `Count ${result.length} exceeds threshold ${metric.threshold}`; } } break; case 'http': const responseTime = result.responseTime || 0; value = responseTime; if (result.statusCode !== 200) { status = 'error'; message = `HTTP ${result.statusCode}`; } else if (responseTime > 3000) { status = 'warning'; message = `Slow response: ${responseTime}ms`; } break; } } const severity = metric.critical && status === 'error' ? 'critical' : status === 'error' ? 'high' : status === 'warning' ? 'medium' : 'low'; return { metric_name: metric.name, status: status, value: value, message: message, severity: severity, timestamp: new Date().toISOString(), details: { type: metric.type, threshold: metric.threshold, critical: metric.critical, raw_result: result } };"
      },
      "id": "evaluate-result",
      "name": "Avaliar Resultado",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 300]
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "monitoring_metrics",
        "columns": "metric_name,status,value,message,severity,timestamp,details",
        "options": {}
      },
      "id": "save-metric",
      "name": "Salvar Metrica",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1450, 300],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "AIDE PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.status }}",
              "operation": "notEquals",
              "value2": "ok"
            }
          ]
        }
      },
      "id": "check-alert-needed",
      "name": "Precisa Alertar?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1650, 300]
    },
    {
      "parameters": {
        "aggregateBy": "allItemsSuccessfully",
        "options": {}
      },
      "id": "wait-all-metrics",
      "name": "Aguardar Todas",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [1850, 200]
    },
    {
      "parameters": {
        "jsCode": "const alerts = $json; const grouped = { critical: [], high: [], medium: [], low: [] }; alerts.forEach(alert => { grouped[alert.severity].push(alert); }); let message = 'ALERTA - AIDE - Alertas de Monitoramento\\n\\n'; if (grouped.critical.length > 0) { message += 'CRITICO\\n'; grouped.critical.forEach(a => { message += '• ' + a.metric_name + ': ' + a.message + '\\n'; }); message += '\\n'; } if (grouped.high.length > 0) { message += 'ALTO\\n'; grouped.high.forEach(a => { message += '• ' + a.metric_name + ': ' + a.message + '\\n'; }); message += '\\n'; } if (grouped.medium.length > 0) { message += 'MEDIO\\n'; grouped.medium.forEach(a => { message += '• ' + a.metric_name + ': ' + a.message + '\\n'; }); } message += '\\n' + new Date().toLocaleString('pt-BR'); const channels = []; if (grouped.critical.length > 0) { channels.push('telegram', 'email', 'slack', 'webhook'); } else if (grouped.high.length > 0) { channels.push('telegram', 'slack'); } else { channels.push('slack'); } return { message: message, channels: channels, alert_count: alerts.length, critical_count: grouped.critical.length, alerts: grouped };"
      },
      "id": "prepare-alert",
      "name": "Preparar Alerta",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2050, 200]
    },
    {
      "parameters": {
        "resource": "message",
        "operation": "sendText",
        "chatId": "{{ $env.TELEGRAM_CHAT_ID }}",
        "text": "={{ $json.message }}"
      },
      "id": "telegram-alert",
      "name": "Alerta Telegram",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [2250, 100],
      "credentials": {
        "telegramApi": {
          "id": "2",
          "name": "AIDE Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "channel": "#aide-alerts",
        "text": "={{ $json.message }}",
        "attachments": [],
        "otherOptions": {}
      },
      "id": "slack-alert",
      "name": "Alerta Slack",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [2250, 200],
      "credentials": {
        "slackApi": {
          "id": "5",
          "name": "AIDE Slack"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "{{ $env.WEBHOOK_ALERT_URL }}",
        "options": {
          "bodyParameters": {
            "parameters": [
              {
                "name": "alerts",
                "value": "={{ JSON.stringify($json.alerts) }}"
              },
              {
                "name": "severity",
                "value": "={{ $json.critical_count > 0 ? 'critical' : 'high' }}"
              }
            ]
          }
        }
      },
      "id": "webhook-alert",
      "name": "Webhook Alert",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2250, 300]
    },
    {
      "parameters": {
        "jsCode": "const metrics = $('save-metric').all().map(item => item.json); const stats = { total_checks: metrics.length, healthy: metrics.filter(m => m.status === 'ok').length, warnings: metrics.filter(m => m.status === 'warning').length, errors: metrics.filter(m => m.status === 'error').length, critical: metrics.filter(m => m.severity === 'critical').length }; stats.health_score = Math.round(((stats.healthy / stats.total_checks) * 100)); function generateRecommendations(metrics) { const recommendations = []; metrics.forEach(m => { if (m.metric_name === 'data_freshness' && m.status !== 'ok') { recommendations.push('Verificar processo de ingestao de dados'); } if (m.metric_name === 'disk_usage' && m.value > 8000) { recommendations.push('Considerar limpeza de dados antigos'); } if (m.metric_name === 'error_rate' && m.value > 50) { recommendations.push('Revisar logs de erro para identificar problemas'); } }); return recommendations; } const report = { timestamp: new Date().toISOString(), health_score: stats.health_score, status: stats.critical > 0 ? 'critical' : stats.errors > 0 ? 'degraded' : stats.warnings > 0 ? 'warning' : 'healthy', statistics: stats, metrics: metrics.map(m => ({ name: m.metric_name, status: m.status, value: m.value, message: m.message })), recommendations: generateRecommendations(metrics) }; return report;"
      },
      "id": "generate-report",
      "name": "Gerar Relatorio",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2450, 400]
    },
    {
      "parameters": {
        "operation": "set",
        "key": "health:latest",
        "value": "={{ JSON.stringify($json) }}",
        "keyType": "automatic",
        "expire": true,
        "ttl": 3600
      },
      "id": "cache-health",
      "name": "Cache Status",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [2650, 400],
      "credentials": {
        "redis": {
          "id": "3",
          "name": "AIDE Redis"
        }
      }
    }
  ],
  "connections": {
    "cron-monitor": {
      "main": [
        [
          {
            "node": "define-metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "define-metrics": {
      "main": [
        [
          {
            "node": "process-metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-metrics": {
      "main": [
        [
          {
            "node": "check-metric-type",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-metric-type": {
      "main": [
        [
          {
            "node": "postgres-check",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "redis-check",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "http-check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "postgres-check": {
      "main": [
        [
          {
            "node": "evaluate-result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "redis-check": {
      "main": [
        [
          {
            "node": "evaluate-result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "http-check": {
      "main": [
        [
          {
            "node": "evaluate-result",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "evaluate-result": {
      "main": [
        [
          {
            "node": "save-metric",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "save-metric": {
      "main": [
        [
          {
            "node": "check-alert-needed",
            "type": "main",
            "index": 0
          },
          {
            "node": "process-metrics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "check-alert-needed": {
      "main": [
        [
          {
            "node": "wait-all-metrics",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "wait-all-metrics": {
      "main": [
        [
          {
            "node": "prepare-alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prepare-alert": {
      "main": [
        [
          {
            "node": "telegram-alert",
            "type": "main",
            "index": 0
          },
          {
            "node": "slack-alert",
            "type": "main",
            "index": 0
          },
          {
            "node": "webhook-alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-metrics": {
      "main": [
        [
          {
            "node": "generate-report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "generate-report": {
      "main": [
        [
          {
            "node": "cache-health",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "tags": [
    {
      "id": "5",
      "name": "monitoring"
    },
    {
      "id": "6",
      "name": "alerts"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "aide-monitor-v1"
}