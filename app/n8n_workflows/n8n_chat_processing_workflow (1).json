{
  "name": "AIDE - Processamento de Chat IA",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "chat/process",
        "responseMode": "responseNode",
        "options": {
          "cors": {
            "enabled": true,
            "allowedOrigins": "*"
          }
        }
      },
      "id": "webhook-trigger",
      "name": "Webhook Chat Request",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [250, 300],
      "webhookId": "aide-chat-processor"
    },
    {
      "parameters": {
        "jsCode": "const input = $json;\nif (!input.message || !input.user_id) {\n  throw new Error('Mensagem e user_id sao obrigatorios');\n}\nconst context = {\n  user_id: input.user_id,\n  session_id: input.session_id || `session_${Date.now()}`,\n  message: input.message,\n  timestamp: new Date().toISOString(),\n  metadata: {\n    source: input.source || 'web',\n    language: input.language || 'pt-BR',\n    timezone: input.timezone || 'America/Sao_Paulo'\n  }\n};\ncontext.message = context.message.trim().substring(0, 2000).replace(/<script[^>]*>.*?<\\/script>/gi, '');\nreturn context;"
      },
      "id": "validate-input",
      "name": "Validar e Preparar",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [450, 300]
    },
    {
      "parameters": {
        "operation": "get",
        "key": "={{ 'session:' + $json.session_id }}",
        "options": {}
      },
      "id": "get-session-cache",
      "name": "Buscar Sessao Cache",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [650, 200],
      "credentials": {
        "redis": {
          "id": "3",
          "name": "AIDE Redis"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM chat_history WHERE session_id = '{{ $json.session_id }}' ORDER BY created_at DESC LIMIT 10",
        "options": {}
      },
      "id": "get-chat-history",
      "name": "Buscar Historico Chat",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [650, 400],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "AIDE PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const message = $json.message.toLowerCase();\nconst context = $json;\nconst intents = {\n  carga_energia: {\n    keywords: ['carga', 'consumo', 'demanda', 'energia', 'mw', 'megawatt'],\n    confidence: 0\n  },\n  cmo_pld: {\n    keywords: ['cmo', 'pld', 'preco', 'custo', 'marginal', 'operacao'],\n    confidence: 0\n  },\n  bandeiras: {\n    keywords: ['bandeira', 'tarifa', 'tarifaria', 'verde', 'amarela', 'vermelha'],\n    confidence: 0\n  },\n  geracao: {\n    keywords: ['geracao', 'producao', 'usina', 'solar', 'eolica', 'hidreletrica', 'termica'],\n    confidence: 0\n  },\n  reservatorio: {\n    keywords: ['reservatorio', 'agua', 'nivel', 'barragem', 'armazenamento'],\n    confidence: 0\n  },\n  intercambio: {\n    keywords: ['intercambio', 'transferencia', 'fluxo', 'importacao', 'exportacao'],\n    confidence: 0\n  },\n  previsao: {\n    keywords: ['previsao', 'projecao', 'futuro', 'tendencia', 'proximo', 'estimativa'],\n    confidence: 0\n  },\n  comparacao: {\n    keywords: ['comparar', 'versus', 'diferenca', 'melhor', 'pior', 'ranking'],\n    confidence: 0\n  }\n};\nfor (const [intent, data] of Object.entries(intents)) {\n  data.keywords.forEach(keyword => {\n    if (message.includes(keyword)) {\n      data.confidence += 1;\n    }\n  });\n  data.confidence = data.confidence / data.keywords.length;\n}\nconst primaryIntent = Object.entries(intents).sort((a, b) => b[1].confidence - a[1].confidence)[0];\nconst entities = {\n  regions: [],\n  periods: [],\n  metrics: [],\n  comparisons: []\n};\nconst regions = ['sudeste', 'sul', 'nordeste', 'norte', 'centro-oeste'];\nregions.forEach(region => {\n  if (message.includes(region)) {\n    entities.regions.push(region);\n  }\n});\nconst periodPatterns = [\n  { pattern: /hoje/gi, value: 'today' },\n  { pattern: /ontem/gi, value: 'yesterday' },\n  { pattern: /ultima semana/gi, value: 'last_week' },\n  { pattern: /ultimo mes/gi, value: 'last_month' },\n  { pattern: /\\d{1,2}\\/\\d{1,2}\\/\\d{4}/gi, value: 'specific_date' }\n];\nperiodPatterns.forEach(({pattern, value}) => {\n  if (pattern.test(message)) {\n    entities.periods.push(value);\n  }\n});\nreturn {\n  ...context,\n  analysis: {\n    primary_intent: primaryIntent[0],\n    confidence: primaryIntent[1].confidence,\n    all_intents: intents,\n    entities: entities,\n    requires_data: primaryIntent[1].confidence > 0.3,\n    is_greeting: /^(oi|ola|bom dia|boa tarde|boa noite|hi|hello)/i.test(message),\n    is_help: /^(ajuda|help|como|tutorial)/i.test(message)\n  }\n};"
      },
      "id": "analyze-intent",
      "name": "Analisar Intencao",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [850, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.analysis.requires_data }}",
              "value2": true
            }
          ]
        }
      },
      "id": "needs-data-check",
      "name": "Precisa Dados?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "jsCode": "const analysis = $json.analysis;\nconst intent = analysis.primary_intent;\nconst entities = analysis.entities;\nlet query = '';\nlet params = {};\nlet startDate = new Date();\nstartDate.setDate(startDate.getDate() - 7);\nlet endDate = new Date();\nif (entities.periods.includes('today')) {\n  startDate = new Date();\n  startDate.setHours(0, 0, 0, 0);\n} else if (entities.periods.includes('yesterday')) {\n  startDate = new Date();\n  startDate.setDate(startDate.getDate() - 1);\n  endDate = new Date(startDate);\n}\nswitch(intent) {\n  case 'carga_energia':\n    query = 'SELECT DATE_TRUNC(\\'hour\\', timestamp) as period, region, AVG(value) as avg_load, MAX(value) as max_load, MIN(value) as min_load, STDDEV(value) as std_dev FROM data_records WHERE dataset_id = \\'carga_energia\\' AND timestamp BETWEEN $1 AND $2 GROUP BY period, region ORDER BY period DESC';\n    params = [startDate, endDate];\n    break;\n  case 'cmo_pld':\n    query = 'SELECT DATE_TRUNC(\\'day\\', timestamp) as period, region, AVG(value) as avg_cmo FROM data_records WHERE dataset_id = \\'cmo_pld\\' AND timestamp BETWEEN $1 AND $2 GROUP BY period, region ORDER BY period DESC';\n    params = [startDate, endDate];\n    break;\n  case 'bandeiras':\n    query = 'SELECT timestamp, value as tariff_value FROM data_records WHERE dataset_id = \\'bandeiras_tarifarias\\' ORDER BY timestamp DESC LIMIT 12';\n    break;\n  default:\n    query = 'SELECT dataset_id, timestamp, region, value, unit FROM data_records WHERE timestamp BETWEEN $1 AND $2 ORDER BY timestamp DESC LIMIT 100';\n    params = [startDate, endDate];\n}\nreturn {\n  query: query,\n  params: params,\n  context: $json\n};"
      },
      "id": "build-query",
      "name": "Construir Query SQL",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 200]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{ $json.query }}",
        "additionalFields": {
          "queryParams": "={{ $json.params.join(',') }}"
        }
      },
      "id": "execute-query",
      "name": "Executar Query",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1450, 200],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "AIDE PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const userMessage = $('validate-input').first().json.message;\nconst analysis = $('analyze-intent').first().json.analysis;\nconst chatHistory = $('get-chat-history').all();\nconst queryResults = $('execute-query').all();\nconst conversationHistory = chatHistory.map(msg => ({ role: msg.json.role, content: msg.json.content })).reverse();\nlet dataContext = '';\nif (queryResults && queryResults.length > 0) {\n  const data = queryResults[0].json;\n  if (analysis.primary_intent === 'carga_energia') {\n    const avgLoad = data.reduce((sum, row) => sum + row.avg_load, 0) / data.length;\n    const maxLoad = Math.max(...data.map(row => row.max_load));\n    dataContext = 'Dados de Carga de Energia - Media: ' + avgLoad.toFixed(2) + ' MW - Pico: ' + maxLoad.toFixed(2) + ' MW';\n  } else if (analysis.primary_intent === 'cmo_pld') {\n    const avgCmo = data.reduce((sum, row) => sum + row.avg_cmo, 0) / data.length;\n    dataContext = 'Dados de CMO/PLD - CMO medio: R$ ' + avgCmo.toFixed(2) + '/MWh';\n  }\n}\nconst systemPrompt = 'Voce e o AIDE, um assistente especializado em dados do setor eletrico brasileiro. Sempre responda em portugues brasileiro de forma clara.';\nconst contextPrompt = 'Contexto - Intencao: ' + analysis.primary_intent + ' - ' + dataContext;\nreturn {\n  model: 'gpt-4-turbo-preview',\n  messages: [\n    { role: 'system', content: systemPrompt },\n    { role: 'system', content: contextPrompt },\n    ...conversationHistory,\n    { role: 'user', content: userMessage }\n  ],\n  temperature: 0.7,\n  max_tokens: 1000,\n  metadata: {\n    session_id: $('validate-input').first().json.session_id,\n    user_id: $('validate-input').first().json.user_id,\n    intent: analysis.primary_intent\n  }\n};"
      },
      "id": "prepare-ai-context",
      "name": "Preparar Contexto IA",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1650, 300]
    },
    {
      "parameters": {
        "resource": "chatCompletion",
        "operation": "create",
        "model": "={{ $json.model }}",
        "messages": "={{ $json.messages }}",
        "options": {
          "temperature": "={{ $json.temperature }}",
          "maxTokens": "={{ $json.max_tokens }}"
        }
      },
      "id": "openai-completion",
      "name": "Claude/GPT Response",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.3,
      "position": [1850, 300],
      "credentials": {
        "openAiApi": {
          "id": "4",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const aiResponse = $json;\nconst metadata = $('prepare-ai-context').first().json.metadata;\nconst responseContent = aiResponse.choices[0].message.content;\nconst needsVisualization = responseContent.includes('grafico') || responseContent.includes('visualizacao') || metadata.intent === 'comparacao';\nfunction determineVisualizationType(intent) {\n  const visualizationMap = {\n    'carga_energia': 'timeseries',\n    'cmo_pld': 'bar_chart',\n    'bandeiras': 'timeline',\n    'comparacao': 'comparison_chart',\n    'previsao': 'forecast_chart'\n  };\n  return visualizationMap[intent] || 'table';\n}\nfunction prepareVisualizationData(data) {\n  if (!data) return null;\n  return {\n    labels: data.map(row => row.period || row.timestamp),\n    datasets: [{ label: 'Valores', data: data.map(row => row.value || row.avg_load || row.avg_cmo) }]\n  };\n}\nfunction generateSuggestions(intent) {\n  const suggestions = {\n    'carga_energia': ['Comparar com periodo anterior', 'Ver previsao', 'Analisar por regiao'],\n    'cmo_pld': ['Comparar patamares', 'Ver historico', 'Analise de tendencias'],\n    'default': ['Ver mais detalhes', 'Exportar dados', 'Gerar relatorio']\n  };\n  return suggestions[intent] || suggestions.default;\n}\nconst structuredResponse = {\n  session_id: metadata.session_id,\n  user_id: metadata.user_id,\n  response: {\n    text: responseContent,\n    intent: metadata.intent,\n    confidence: $('analyze-intent').first().json.analysis.confidence,\n    data: $('execute-query').all()[0]?.json || null,\n    visualization: needsVisualization ? {\n      type: determineVisualizationType(metadata.intent),\n      data: prepareVisualizationData($('execute-query').all()[0]?.json)\n    } : null,\n    suggestions: generateSuggestions(metadata.intent),\n    metadata: {\n      processing_time: Date.now() - new Date($('validate-input').first().json.timestamp).getTime(),\n      tokens_used: aiResponse.usage?.total_tokens || 0,\n      model: aiResponse.model\n    }\n  }\n};\nreturn structuredResponse;"
      },
      "id": "process-response",
      "name": "Processar Resposta",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2050, 300]
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "chat_history",
        "columns": "session_id,user_id,role,content,metadata,created_at",
        "additionalFields": {}
      },
      "id": "save-user-message",
      "name": "Salvar Mensagem User",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [2250, 200],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "AIDE PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "table": "chat_history",
        "columns": "session_id,user_id,role,content,metadata,created_at",
        "additionalFields": {}
      },
      "id": "save-ai-response",
      "name": "Salvar Resposta IA",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [2250, 400],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "AIDE PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "operation": "set",
        "key": "={{ 'session:' + $json.session_id }}",
        "value": "={{ JSON.stringify($json) }}",
        "keyType": "automatic",
        "expire": true,
        "ttl": 3600
      },
      "id": "update-session-cache",
      "name": "Atualizar Cache Sessao",
      "type": "n8n-nodes-base.redis",
      "typeVersion": 1,
      "position": [2450, 300],
      "credentials": {
        "redis": {
          "id": "3",
          "name": "AIDE Redis"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "response-webhook",
      "name": "Responder Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2650, 300]
    },
    {
      "parameters": {
        "jsCode": "const userMessage = $json.message;\nconst analysis = $json.analysis;\nlet simpleResponse = '';\nif (analysis.is_greeting) {\n  simpleResponse = 'Ola! Sou o AIDE, seu assistente para dados do setor eletrico. Como posso ajuda-lo hoje?';\n} else if (analysis.is_help) {\n  simpleResponse = 'Posso ajuda-lo com: Analise de carga de energia, Informacoes sobre CMO/PLD, Status das bandeiras tarifarias, Dados de geracao por fonte, Niveis de reservatorios, Intercambio entre regioes. Faca sua pergunta!';\n} else {\n  simpleResponse = 'Entendi sua pergunta. Vou buscar essas informacoes para voce...';\n}\nreturn {\n  session_id: $json.session_id,\n  user_id: $json.user_id,\n  response: {\n    text: simpleResponse,\n    intent: analysis.primary_intent,\n    confidence: analysis.confidence,\n    data: null,\n    visualization: null,\n    suggestions: ['Ver carga atual do sistema', 'Consultar CMO medio', 'Status das bandeiras tarifarias']\n  }\n};"
      },
      "id": "simple-response",
      "name": "Resposta Simples",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 400]
    }
  ],
  "connections": {
    "webhook-trigger": {
      "main": [
        [
          {
            "node": "validate-input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "validate-input": {
      "main": [
        [
          {
            "node": "get-session-cache",
            "type": "main",
            "index": 0
          },
          {
            "node": "get-chat-history",
            "type": "main",
            "index": 0
          },
          {
            "node": "analyze-intent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "analyze-intent": {
      "main": [
        [
          {
            "node": "needs-data-check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "needs-data-check": {
      "main": [
        [
          {
            "node": "build-query",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "simple-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "build-query": {
      "main": [
        [
          {
            "node": "execute-query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "execute-query": {
      "main": [
        [
          {
            "node": "prepare-ai-context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-session-cache": {
      "main": [
        [
          {
            "node": "prepare-ai-context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get-chat-history": {
      "main": [
        [
          {
            "node": "prepare-ai-context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "prepare-ai-context": {
      "main": [
        [
          {
            "node": "openai-completion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "openai-completion": {
      "main": [
        [
          {
            "node": "process-response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "process-response": {
      "main": [
        [
          {
            "node": "save-user-message",
            "type": "main",
            "index": 0
          },
          {
            "node": "save-ai-response",
            "type": "main",
            "index": 0
          },
          {
            "node": "update-session-cache",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "update-session-cache": {
      "main": [
        [
          {
            "node": "response-webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "simple-response": {
      "main": [
        [
          {
            "node": "response-webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "tags": [
    {
      "id": "3",
      "name": "chat-processing"
    },
    {
      "id": "4",
      "name": "ai-integration"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "aide-chat-v1"
}