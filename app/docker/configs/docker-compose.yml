# docker-compose.yml
# Orquestração completa do sistema AIDE

version: '3.9'

services:
  # ===========================================
  # PostgreSQL Database
  # ===========================================
  postgres:
    image: postgres:15-alpine
    container_name: aide_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-aide_db}
      POSTGRES_USER: ${DB_USER:-aide_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-aide_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=pt_BR.UTF-8"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-aide_user} -d ${DB_NAME:-aide_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aide_network

  # ===========================================
  # Redis Cache
  # ===========================================
  redis:
    image: redis:7-alpine
    container_name: aide_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-aide_redis_password}
    volumes:
      - redis_data:/data
      - ./docker/configs/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aide_network

  # ===========================================
  # n8n Workflow Automation
  # ===========================================
  n8n:
    image: n8nio/n8n:latest
    container_name: aide_n8n
    restart: unless-stopped
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-aide}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-aide_n8n_password}
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=${N8N_PROTOCOL:-http}
      - N8N_PATH=/
      - WEBHOOK_URL=${N8N_WEBHOOK_URL:-http://localhost:5678}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${N8N_DB_NAME:-n8n}
      - DB_POSTGRESDB_USER=${DB_USER:-aide_user}
      - DB_POSTGRESDB_PASSWORD=${DB_PASSWORD:-aide_password}
      - EXECUTIONS_DATA_PRUNE=true
      - EXECUTIONS_DATA_MAX_AGE=168
      - GENERIC_TIMEZONE=America/Sao_Paulo
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n_workflows:/workflows
    ports:
      - "${N8N_PORT:-5678}:5678"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aide_network

  # ===========================================
  # Streamlit Application
  # ===========================================
  streamlit:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: aide_streamlit
    restart: unless-stopped
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-aide_db}
      DB_USER: ${DB_USER:-aide_user}
      DB_PASSWORD: ${DB_PASSWORD:-aide_password}
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-aide_redis_password}
      # n8n
      N8N_BASE_URL: http://n8n:5678
      N8N_API_KEY: ${N8N_API_KEY}
      # AI Services
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      # ONS
      ONS_API_URL: ${ONS_API_URL:-https://dados.ons.org.br/api/v1}
      ONS_API_KEY: ${ONS_API_KEY}
      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-development}
      SECRET_KEY: ${SECRET_KEY}
      # Monitoring
      ENABLE_MONITORING: ${ENABLE_MONITORING:-true}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_CHAT_ID: ${TELEGRAM_CHAT_ID}
      SLACK_WEBHOOK: ${SLACK_WEBHOOK}
    volumes:
      - ./app:/app/app
      - ./services:/app/services
      - ./models:/app/models
      - ./utils:/app/utils
      - ./components:/app/components
      - ./assets:/app/assets
      - streamlit_data:/app/data
      - ./logs:/app/logs
    ports:
      - "${STREAMLIT_PORT:-8501}:8501"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      n8n:
        condition: service_healthy
    command: streamlit run app/main.py --server.port=8501 --server.address=0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - aide_network

  # ===========================================
  # pgAdmin (Optional - for database management)
  # ===========================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: aide_pgadmin
    restart: unless-stopped
    profiles: ["dev"]  # Only starts with --profile dev
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@aide.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      - postgres
    networks:
      - aide_network

  # ===========================================
  # Nginx Reverse Proxy (Production)
  # ===========================================
  nginx:
    image: nginx:alpine
    container_name: aide_nginx
    restart: unless-stopped
    profiles: ["production"]
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - streamlit
      - n8n
    networks:
      - aide_network

  # ===========================================
  # Grafana Monitoring (Optional)
  # ===========================================
  grafana:
    image: grafana/grafana:latest
    container_name: aide_grafana
    restart: unless-stopped
    profiles: ["monitoring"]
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    depends_on:
      - postgres
      - redis
    networks:
      - aide_network

  # ===========================================
  # Prometheus Metrics (Optional)
  # ===========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: aide_prometheus
    restart: unless-stopped
    profiles: ["monitoring"]
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - aide_network

  # ===========================================
  # Redis Commander (Optional - for Redis management)
  # ===========================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: aide_redis_commander
    restart: unless-stopped
    profiles: ["dev"]
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-aide_redis_password}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    depends_on:
      - redis
    networks:
      - aide_network

# ===========================================
# Networks
# ===========================================
networks:
  aide_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/16

# ===========================================
# Volumes
# ===========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  n8n_data:
    driver: local
  streamlit_data:
    driver: local
  pgadmin_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  nginx_cache:
    driver: local